{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"phenopacket store","text":"<p>This repository contains a collection of notebooks that generate GA4GH phenopackets. for analysis projects. The phenopackets represent case reports about individuals with Mendelian diseases.</p> <p>The notebooks are contained in the notebooks folder organized according to gene.</p> <p>The corresponding phenopackets are stored in the phenpackets subfolder, also organized according to gene.</p> <p>See Collections for a short documentation page for each collection included in this repository.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>The best place to leave feedback, ask questions, and report bugs is the GitHub Issue Tracker.</p>"},{"location":"collections/","title":"Collections","text":"<p>Phenopacket store is a repository of GA4GH phenopackets. that were mainly created using the Python library pyphetools. All of the phenopackets were derived from publised case or cohort reports. We have created one page for each of the collections of phenopackets offered by this repository.</p> Cohort Comments ANKH 7 Phenopackets; Craniometaphyseal dysplasia; Chondrocalcinosis 2"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to phenopacket-store are welcome. The scope of phenopacket-store comprises cohorts of indiduals with rare disease with deep phenotype as well as genotypic data.</p> <p>There are many ways of contributing. Almost all of the notebooks in this repository were created using the pyphetools library, and users can learn how to use it by studying the notebooks listed on the collections page. Alternatively, we welcome contributions made using templated Excel files as described below.</p>"},{"location":"contributing/#a-format-for-cohort-descriptions-in-excel","title":"A format for cohort descriptions in excel","text":"<p>The file should contain at least the following information; see explanations below.</p> row_type id age sex allele Tall stature Abnormal sternum morphology Potassium header1 str ISO8601 str NM_000138.5 simple option threshold header2 HP:0000098 HP:0000767; HP:0000768 3.5-5.2 mEq/L: High-&gt;Hyperkalemia{HP:0002153); Low-&gt;Hypokalemia(HP:0002900) individual patient A P6Y male c.8326C&gt;T + Pectus carinatum n/a individual patient B P9Y female c.7988G&gt;C - Pectus excavatum 5.8"},{"location":"contributing/#row_type","title":"row_type","text":"<p>Each row must begin with one of the words \"header1\", \"header2\" or \"individual\". There should be one row for each individual in the cohort.</p>"},{"location":"contributing/#id","title":"id","text":"<p>This is an cohort-specific identifier that must be anonymized.</p>"},{"location":"contributing/#age","title":"age","text":"<p>This is the age of the individual at the time of the medical encounter at which the phenotypic features were recorded. The format of the column is recorded in the header1 line. Valid options are ISO8601 for strings such as \"P4Y\" (four years of age) and \"P71Y6M2D\" for 71 years, 6 months, and 2 days; Years for 5 (5 years of age) or 7.5 (7 years and 6 months).</p>"},{"location":"contributing/#sex","title":"sex","text":"<p>Use male, female, other, or unknown.</p>"},{"location":"contributing/#hpo-columns","title":"HPO columns","text":"<p>The remaining columns contain information about HPO terms observed in the individuals. There are three types of column.</p>"},{"location":"contributing/#simple","title":"Simple.","text":"<p>The top row contains the label of the term. The header1 row contains the word \"simple\". The header2 row contains the HPO id; in the example table, we see Tall stature; HP:0000098. If the feature is observed in an indivual, use \"+\"; if the feature was explicitly excluded, use \"-\". If the feature was not measured or no information is available, use \"n/a\".</p>"},{"location":"contributing/#option","title":"Option","text":"<p>This type of column is used for sets of related terms. The top row contains the label of the HPO superclass (herere Abnormal sternum morphology HP:0000766). The header1 row contains the word \"option\". The header2 row contains the HPO ids of the terms that can be recorded in the column. In this example, it is the terms Pectus carinatum; HP:0000768 and Pectus excavatum HP:0000767. In the individual rows, the corresponding label of the HPO term is written. Any number of terms can be put into one column in this way.</p>"},{"location":"contributing/#threshold","title":"Threshold","text":"<p>This type of column is used for numerical data with a normal range. Indicate the normal range and the HPO terms that are used for low or high values as shown.</p>"},{"location":"contributing/#text-mining","title":"Text mining","text":"<p>This type of column is not preferred but if necessary can be used. An example is not shown here, but but \"text mining\" in the header1 row and nothing in the header2 row. We will use text mining to attempt to extract HPO terms from the texts in the column.</p>"},{"location":"developers/","title":"For developers","text":"<p>The phenopacket store repository presents collections of GA4GH phenopackets. that can be used to test phenopacket-based software.</p> <p>Each collection features phenopackets representing clinical infomration about individuals with Mendelian disease-associated variants in specific genes, or in some case, collections of phenopackets derived from published cohorts or studies.</p>"},{"location":"developers/#pyphetools","title":"pyphetools","text":"<p>Most of the phenopackets were developed using the pyphetools library. Details about how the phenopackets were generated can be found in the corresponding notebooks folder organized according to gene or collection. In some cases, the phenopackets were generated with other software, and then we present a notebook that summarizes the phenopackets.</p> <p>All phenopackets are stored in the phenpackets subfolder, also organized according to gene.</p> <p>There are many ways to collect all phenopackets from all of the subfolders. Here is a simple example in Python.</p> <pre><code>import os\nimport random\n\npath_to_phenopackets_folder = \"phenopackets\" # adjust as needed\n\ndef get_all_phenopackets(top_level_dir):\n    phenopacket_list = []\n    for dir in os.listdir(top_level_dir):\n        dirpath = os.path.join(top_level_dir, dir)\n        for file in os.listdir(dirpath):\n            path_to_phenopacket = os.path.join(dir, file)\n            phenopacket_list.append(path_to_phenopacket)\n    return phenopacket_list\n\n\npheno_pack_list = get_all_phenopackets(path_to_phenopackets_folder)\n\nprint(f\"Found a total of {len(pheno_pack_list)} phenopackets.\")\nprint(\"Here is a random sample of 10 entries:\")\nfor f in random.sample(pheno_pack_list, 10):\n    print(f)\n</code></pre> <p>This will produce output such as the following.</p> <pre><code>Found a total of 1508 phenopackets.\nHere is a random sample of 10 entries\nSTXBP1/PMID_35190816_STX_26633542_No_ID_2.json\nSTXBP1/PMID_35190816_STX_32139178_Patient_Neonatal26.json\nPPP2R1A/PMID_37761890_6.json\nSCN2A/phenopacket_fam299.json\nSCN2A/phenopacket_fam46.json\nSCN2A/phenopacket_fam420.json\nLMNA/Novelli_2002_12075506-FAM1-VII:1.json\nFBN1/PMID_10756346_D46.json\nSMARCC2/PMID_37551667_Ind-01.json\nSUOX/PMID_36303223_individual_4_PMID_12112661.json\n</code></pre>"}]}